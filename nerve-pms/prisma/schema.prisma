// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum UserRole {
  CLERK
  DOCTOR
}

// whereas name is firstName + lastName
model User {
  id                    String                 @id @default(cuid())
  // firstName     String?
  // lastName      String?
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(CLERK)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// CRUD Models for patients

enum PatientStatus {
  ACTIVE
  ARCHIVED
}

model PatientInformation {
  id              String        @id @default(cuid())
  patientStatus   PatientStatus @default(ACTIVE)
  name            String        @unique
  age             String
  city            String
  completeAddress String
  civilStatus     String
  handedness      String
  sex             String
  birthday        DateTime
  occupation      String
  religion        String
  email           String?
  phone           String?
  lastVisit       DateTime?
  nextVisit       DateTime?
  lastUpdate      DateTime

  patientHistories  PatientHistory[]
  followUps         FollowUps[]
  PatientVitalSigns PatientVitalSigns[]

  @@map("patient_information")
}

model PatientVitalSigns {
  id              String   @id @default(cuid())
  patientId       String
  followUpsId     String?
  weight          String
  pulseRate       Int
  bodyTemperature String
  bloodPressure   String
  oxygen          Int
  date            DateTime
  lastUpdate      DateTime

  patientInformation PatientInformation @relation(fields: [patientId], references: [id], onDelete: Cascade)
  followUps          FollowUps?         @relation(fields: [followUpsId], references: [id], onDelete: Cascade)
  PatientHistory     PatientHistory[]

  @@map("patient_vital_signs")
}

model PatientHistory {
  id                      String   @id @default(cuid())
  patientId               String   @unique // Enforces one history per patient
  date                    DateTime
  referredBy              String?
  chiefComplaint          String
  historyOfPresentIllness String
  pastMedicalHistory      String
  familyHistory           String
  personalSocialHistory   String
  obgyneHistory           String?
  physicalExamination     String
  neurologicalExamination String?
  treatmentPlan           String?
  plan                    String
  vitalSignsid            String

  patient    PatientInformation @relation(fields: [patientId], references: [id], onDelete: Cascade)
  vitalSigns PatientVitalSigns? @relation(fields: [vitalSignsid], references: [id])

  @@map("patient_histories")
}

model FollowUps {
  id             String   @id @default(cuid())
  patientId      String
  date           DateTime
  labResults     String?
  chiefComplaint String
  so             String
  diagnosis      String
  treatment      String
  plan           String

  patient    PatientInformation  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  vitalSigns PatientVitalSigns[]

  @@map("follow_ups")
}
